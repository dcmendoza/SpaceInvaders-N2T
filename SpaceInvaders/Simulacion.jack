class Simulacion {
    field NaveEspacial naveEspacial;
    field Disparo disparo;
    field Enemigo enemigo1, enemigo2, enemigo3, enemigo4, enemigo5, enemigo6;
    field int numEnemigos;
    static int direccion, direccionX;

    constructor Simulacion nuevo(){
         // Inicializa la pantalla y los objetos del juego
        do Screen.drawRectangle(0,0,511,255);
        do Screen.setColor(true);

        let naveEspacial = NaveEspacial.nuevo();
        let disparo = Disparo.nuevo(naveEspacial.obtenerX(), naveEspacial.obtenerY()-5); 
        let direccion = 1;
        let direccionX = 1;

        let numEnemigos = 6;
        let enemigo1 = Enemigo.nuevo(230, 60);
        let enemigo2 = Enemigo.nuevo(250, 60);
        let enemigo3 = Enemigo.nuevo(270, 60);
        let enemigo4 = Enemigo.nuevo(230, 70);
        let enemigo5 = Enemigo.nuevo(250, 150);
        let enemigo6 = Enemigo.nuevo(270, 70);

        // Dibuja todos los elementos iniciales en pantalla
        do naveEspacial.dibujar();
        do enemigo1.dibujar();
        do enemigo2.dibujar();
        do enemigo3.dibujar();
        do enemigo4.dibujar();
        do enemigo5.dibujar();
        do enemigo6.dibujar();
        do Sys.wait(1000);
        return this;
    }

    method void empezar(){ 
        var boolean simulacionActiva, msg;
        var int z, controlReboteTiempo, controlReboteTiempoAlien, controlReboteTiempoDisparo, tiempo, tiempoEnemigo, tiempoDisparo;

        // Inicialización de controles de tiempo y estado
        let simulacionActiva = true;
        let msg = true;
        let controlReboteTiempo = 200;
        let controlReboteTiempoAlien = 3000;
        let controlReboteTiempoDisparo = 50;

        // Bucle principal del juego
        while(simulacionActiva){ 
            let tiempo = tiempo + 1;
            if (tiempo = controlReboteTiempo){
                let z = Keyboard.keyPressed();
                if (z = 130){
                    do naveEspacial.moverIzquierda(); // Mueve la nave a la izquierda
                }
                if (z = 132){
                    do naveEspacial.moverDerecha(); // Mueve la nave a la derecha
                }
                if (z = 32){
                    if(disparo.obtenerEstado() = false){
                        do disparo.establecerX(naveEspacial.obtenerX()+5); 
                        do disparo.establecerEstado(); 
                    }
                }
                let tiempo = 0;                
            }

            let tiempoDisparo = tiempoDisparo + 1;
            if (tiempoDisparo = controlReboteTiempoDisparo){
                if (disparo.obtenerEstado() = true){
                    do disparo.actualizar(); // Actualiza la posición del disparo
                    do comprobarColisiones(); // Comprueba si hubo colisión con un enemigo
                }
                let tiempoDisparo = 0;
            }

            let tiempoEnemigo = tiempoEnemigo + 1;
            if (tiempoEnemigo = controlReboteTiempoAlien){
                do actualizarEnemigos(); // Mueve los enemigos
                if(enemigosAlcanzanFondo()){
                    let simulacionActiva = false; // Termina el juego si los enemigos llegan al fondo
                }
                let tiempoEnemigo = 0;
            }            
            
            if (numEnemigos = 0){
                let simulacionActiva = false; // Termina el juego si todos los enemigos han sido eliminados
            }
            if (z = 140){
                do Screen.clearScreen(); // Limpia la pantalla si el jugador decide salir
                let msg = false;
                let simulacionActiva = false;
            }
        }

        // Muestra el mensaje final según el resultado del juego
        if(numEnemigos = 0){
            do Ganaste(msg);
        }else{
            do Perdiste(msg);
        }        

        // Libera memoria de todos los objetos creados
        do naveEspacial.eliminar();
        do disparo.eliminar();
        do enemigo1.eliminar();
        do enemigo2.eliminar();
        do enemigo3.eliminar();
        do enemigo4.eliminar();
        do enemigo5.eliminar();
        do enemigo6.eliminar();
        do Memory.deAlloc(this);
        return;
    }

    method void Perdiste(boolean msg){
        // Muestra el mensaje de "PERDISTE" y espera la interacción del usuario para salir
        var int z;
        if (msg){
            do Output.moveCursor(11, 28);
            do Output.printString("PERDISTE");
            
            do Sys.wait(500);
            while (msg){
                let z = Keyboard.keyPressed();
                if (z = 140 | z = 32){
                    let msg = false;
                    while(~(z = 0)){  
                        let z = Keyboard.keyPressed();             
                    }
                }
            }
        }      
        return;
    }

    method void Ganaste(boolean msg){
        // Muestra el mensaje de "GANASTE" y espera la interacción del usuario para salir
        var int z;
        do Output.moveCursor(11, 29);
        do Output.printString("GANASTE");
        do Sys.wait(500);
        while (msg){      
            let z = Keyboard.keyPressed();
            if (z = 140 | z = 32){
                let msg = false;
            }
        }
        return;
    }
    
    method void actualizarEnemigos(){
        // Actualiza la posición de los enemigos, cambiando de dirección si es necesario
        var boolean moverseEnX, direcccionesCoinciden;
        let direcccionesCoinciden = (direccion = direccionX);
        let moverseEnX = true & enemigo1.verificarMovimiento(direcccionesCoinciden);
        let moverseEnX = moverseEnX & enemigo2.verificarMovimiento(direcccionesCoinciden);
        let moverseEnX = moverseEnX & enemigo3.verificarMovimiento(direcccionesCoinciden);
        let moverseEnX = moverseEnX & enemigo4.verificarMovimiento(direcccionesCoinciden);
        let moverseEnX = moverseEnX & enemigo5.verificarMovimiento(direcccionesCoinciden);
        let moverseEnX = moverseEnX & enemigo6.verificarMovimiento(direcccionesCoinciden);
        if (moverseEnX){
            // Mueve los enemigos en el eje X
            do enemigo1.actualizarX();
            do enemigo2.actualizarX();
            do enemigo3.actualizarX();
            do enemigo4.actualizarX();
            do enemigo5.actualizarX();
            do enemigo6.actualizarX();
            let direccionX = direccion;
        }else{
            // Mueve los enemigos en el eje Y
            do enemigo4.actualizarY();
            do enemigo5.actualizarY();
            do enemigo6.actualizarY();
            do enemigo1.actualizarY();
            do enemigo2.actualizarY();
            do enemigo3.actualizarY();
                        
        }
        return;
    }

    method boolean enemigosAlcanzanFondo(){
        // Verifica si algún enemigo ha alcanzado el límite inferior
        if (enemigo1.obtenerEstado()){
            if (enemigo1.obtenerY() > 200){
                return true;
            }
        }
        if (enemigo2.obtenerEstado()){
            if (enemigo2.obtenerY() > 200){
                return true;
            }
        }
        if (enemigo3.obtenerEstado()){
            if (enemigo3.obtenerY() > 200){
                return true;
            }
        }
        if (enemigo4.obtenerEstado()){
            if (enemigo4.obtenerY() > 200){
                return true;
            }
        }
        if (enemigo5.obtenerEstado()){
            if (enemigo5.obtenerY() > 200){
                return true;
            }
        }
        if (enemigo6.obtenerEstado()){
            if (enemigo6.obtenerY() > 200){
                return true;
            }
        }
        return false;
    }

    method void comprobarColisiones(){
        // Verifica si el disparo ha colisionado con algún enemigo y actualiza el estado
        if ((enemigo1.obtenerEstado() = true) & (disparo.obtenerX() > (enemigo1.obtenerX()-2)) & (disparo.obtenerX() < (enemigo1.obtenerX()+11)) & (disparo.obtenerY() > enemigo1.obtenerY()) & (disparo.obtenerY() < (enemigo1.obtenerY()+7))){
            do enemigo1.matar();
            do disparo.reiniciar();
            let numEnemigos = numEnemigos-1;
        }
        if ((enemigo2.obtenerEstado() = true) & (disparo.obtenerX() > (enemigo2.obtenerX()-2)) & (disparo.obtenerX() < (enemigo2.obtenerX()+11)) & (disparo.obtenerY() > enemigo2.obtenerY()) & (disparo.obtenerY() < (enemigo2.obtenerY()+7))){
            do enemigo2.matar();
            do disparo.reiniciar();
            let numEnemigos = numEnemigos-1;
        }
        if ((enemigo3.obtenerEstado() = true) & (disparo.obtenerX() > (enemigo3.obtenerX()-2)) & (disparo.obtenerX() < (enemigo3.obtenerX()+11)) & (disparo.obtenerY() > enemigo3.obtenerY()) & (disparo.obtenerY() < (enemigo3.obtenerY()+7))){
            do enemigo3.matar();
            do disparo.reiniciar();
            let numEnemigos = numEnemigos-1;
        }
        if ((enemigo4.obtenerEstado() = true) & (disparo.obtenerX() > (enemigo4.obtenerX()-2)) & (disparo.obtenerX() < (enemigo4.obtenerX()+11)) & (disparo.obtenerY() > enemigo4.obtenerY()) & (disparo.obtenerY() < (enemigo4.obtenerY()+7))){
            do enemigo4.matar();
            do disparo.reiniciar();
            let numEnemigos = numEnemigos-1;
        }
        if ((enemigo5.obtenerEstado() = true) & (disparo.obtenerX() > (enemigo5.obtenerX()-2)) & (disparo.obtenerX() < (enemigo5.obtenerX()+11)) & (disparo.obtenerY() > enemigo5.obtenerY()) & (disparo.obtenerY() < (enemigo5.obtenerY()+7))){
            do enemigo5.matar();
            do disparo.reiniciar();
            let numEnemigos = numEnemigos-1;
        }
        if ((enemigo6.obtenerEstado() = true) & (disparo.obtenerX() > (enemigo6.obtenerX()-2)) & (disparo.obtenerX() < (enemigo6.obtenerX()+11)) & (disparo.obtenerY() > enemigo6.obtenerY()) & (disparo.obtenerY() < (enemigo6.obtenerY()+7))){
            do enemigo6.matar();
            do disparo.reiniciar();
            let numEnemigos = numEnemigos-1;
        }
        return;
    }
    
    function int obtenerDireccion(){
        return direccion;
    }

    function void establecerDireccion(int nuevaDireccion){
        let direccion = nuevaDireccion;
        return;
    }
}